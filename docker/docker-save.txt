`docker save` 是 Docker 中的一个命令，用于将 Docker 镜像保存为一个存档文件（通常是 `.tar` 文件）。这个存档文件可以用 `docker load` 命令重新加载到其他机器上，也可以备份到不同的存储设备中。

这种方式特别适合在没有网络连接，或在不同的环境之间传输 Docker 镜像的场景。

---

### 1. **基本语法**

```bash
docker save -o <file_name>.tar <image_name>:<tag>
```

- `-o <file_name>.tar`：指定输出的存档文件名。
- `<image_name>:<tag>`：需要保存的 Docker 镜像名称及其标签（如 `nginx:latest`）。
  如果省略 `:tag`，默认会保存 `latest` 版本。

---

### 2. **示例用法**

#### **保存单个镜像**
将镜像 `nginx:latest` 保存为一个名为 `nginx_latest.tar` 的文件：
```bash
docker save -o nginx_latest.tar nginx:latest
```

生成的 `nginx_latest.tar` 文件将包含该镜像及其所有相关层（layers）。

#### **保存多个镜像**
如果需要将多个镜像打包到同一个文件中，可以指定多个镜像名称：
```bash
docker save -o my_images.tar nginx:latest redis:alpine busybox:1.34
```
此时，`my_images.tar` 文件中会同时保存 `nginx:latest`、`redis:alpine` 和 `busybox:1.34` 三个镜像。

#### **将输出直接保存到某目录**
如果希望直接将 `.tar` 保存到某目录，可以指定路径。例如：
```bash
docker save -o /path/to/save/nginx_backup.tar nginx:latest
```

---

### 3. **验证保存的镜像文件**
为了确保生成的 `.tar` 文件保存成功，你可以查看文件大小：
```bash
ls -lh nginx_latest.tar
```

还可以进一步验证 `.tar` 文件内容，查看镜像中存储的层和元数据（可选）：
```bash
tar -tf nginx_latest.tar
```

---

### 4. **加载保存的镜像到 Docker**
用于将 `docker save` 生成的镜像文件重新加载到另一台机器上（或本地 Docker 中），可以使用 `docker load`：

```bash
docker load -i nginx_latest.tar
```

- `-i nginx_latest.tar`：指定要加载的 `.tar` 文件。

检查加载后的镜像是否成功：
```bash
docker images
```
你会看到 `nginx:latest` 的镜像出现在本地镜像列表中。

---

### 5. **适用场景**
- **离线传递镜像**：在没有网络连接的环境下，将镜像传递到其他机器中。
- **备份镜像**：将重要镜像保存到备份设备（如硬盘或云存储）中。
- **跨环境传递镜像**：比如从开发环境传输到生产服务器。
- **多机部署**：在不希望重复从镜像仓库拉取镜像的情况下，直接加载保存的 `.tar`。

---

### 6. **与 `docker export` 的区别**

`docker save` 和 `docker export` 是两个不一样的命令，使用的场景不同：

| **特性**       | `docker save`                                     | `docker export`                               |
|----------------|---------------------------------------------------|-----------------------------------------------|
| **作用对象**   | Docker **镜像**                                   | Docker **容器**                               |
| **内容**       | 包含镜像层（layers）和元数据信息                  | 仅导出容器的文件系统（不包含镜像元数据）      |
| **用途**       | 用于备份和传输镜像，便于在另一台机器加载           | 用于导出容器内容（例如克隆一个容器的文件系统）|
| **恢复方式**   | 用 `docker load` 加载到 Docker 容器引擎           | 用 `docker import` 恢复为新的镜像            |

---

### 7. **注意事项**
- 如果镜像文件较大，可使用压缩工具（如 `gzip`）减小文件大小：
  ```bash
  docker save nginx:latest | gzip > nginx_latest.tar.gz
  ```

  恢复时需要解压后再加载，或直接管道加载：
  ```bash
  gunzip < nginx_latest.tar.gz | docker load
  ```

- 使用 `docker save` 时，确保镜像在本地存在，可通过以下命令检查：
  ```bash
  docker images
  ```

---

通过以上方法，你可以便捷地保存、备份和传输 Docker 镜像，即使是在离线环境下，也可以高效完成应用部署和管理任务！